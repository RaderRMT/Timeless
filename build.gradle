import com.replaymod.gradle.preprocess.PreprocessTask

buildscript {
    def (major, minor, patch) = project.name.split("-")[0].tokenize('.')
    project.ext.mcVersion = "${major}${minor.padLeft(2, '0')}${(patch ?: '').padLeft(2, '0')}" as int

    dependencies {
        classpath 'fabric-loom:fabric-loom.gradle.plugin:0.11-SNAPSHOT'
    }
}

plugins {
    id 'maven-publish'
}

apply plugin: 'fabric-loom'
apply plugin: 'com.replaymod.preprocess'

tasks.withType(JavaCompile).configureEach {
    it.options.release.set(17)
}

version = project.name + '-' + project.mod_version
group = "fr.rader"
archivesBaseName = "timeless"

def mappingsVersions = [
        11904: "1.19.4+build.2",
        12001: "1.20.1+build.1",
        12004: "1.20.4+build.3"
]

def fabricApiVersions = [
        11904: "0.83.0+1.19.4",
        12001: "0.83.0+1.20.1",
        12004: "0.96.4+1.20.4"
]

def modMenuVersions = [
        11904: "6.2.3",
        12001: "7.0.1",
        12004: "9.0.0"
]

def clothConfigVersions = [
        11904: "10.0.96",
        12001: "11.0.99",
        12004: "13.0.121"
]

repositories {
    maven {
        url "https://maven.shedaniel.me/"
    }

    maven {
        url "https://maven.terraformersmc.com/releases/"
        content {
            includeGroup "com.terraformersmc"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.name}"
    mappings "net.fabricmc:yarn:${mappingsVersions[mcVersion]}:v2"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabricApiVersions[mcVersion]}"

    modApi "com.terraformersmc:modmenu:${modMenuVersions[mcVersion]}"

    modApi("me.shedaniel.cloth:cloth-config-fabric:${clothConfigVersions[mcVersion]}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.2")))
}

if (mcVersion >= 12000) {
    loom.accessWidenerPath = rootProject.file("src/main/resources/timeless.accesswidener")
} else {
    loom.accessWidenerPath = rootProject.file("versions/1.19.4/src/main/resources/timeless.accesswidener")
}

if (project.name == '1.20.4') {
    tasks.register('generateJava', Copy) {
        from "${project.parent.projectDir}/src/template/java"
        into "${project.parent.buildDir}/generated/java"
    }

    sourceSets.main.java.srcDir "${project.parent.buildDir}/generated/java"
    compileJava.dependsOn(generateJava)
}

preprocess {
    vars.put("MC", project.mcVersion)

    keywords.set([
            ".java": PreprocessTask.DEFAULT_KEYWORDS,
            ".json": PreprocessTask.DEFAULT_KEYWORDS
    ])
}

processResources {
    inputs.property("version", project.version)
    inputs.property("loader_version", project.loader_version)

    filteringCharset("UTF-8")
    filesMatching("fabric.mod.json") {
        expand(
                "version": project.version,
                "loader_version": project.loader_version
        )
    }
}

loom {
    runs {
        client {
            ideConfigGenerated = true
        }
    }
}

tasks.ideaSyncTask.doFirst {
    def nativesPath = extension.getFiles().getNativesDirectory(project).getAbsolutePath()

    loom.runConfigs.configureEach { config ->
        if (config.name == "client") {
            config.property("java.library.path", nativesPath)
        }
    }
}

java {
    withSourcesJar()

    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}